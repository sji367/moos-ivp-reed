/*
 * poly.cpp
 *
 *  Created on: Jan 22, 2017
 *      Author: sji367
 */

#include "poly.h"

int Poly::t_lvl = 0;
int Poly::ref_frame = 0;

// Initialize Member Variables
Poly::Poly() :
		OA()
{

	m = 0;
	b = 0;
}

// Initialize Member Variables
Poly::Poly(double X, double Y) :
		OA(X,Y)
{
	m = 0;
	b = 0;
}

Poly::~Poly()
{
	ref_frame = 0;
	obs_type = "";
	t_lvl = 0;
}
void Poly::setStatics(int Ref_Frame, int T_Lvl, string Obs_Type)
{
	ref_frame = Ref_Frame;
	obs_type=Obs_Type;
	t_lvl = T_Lvl;
}

void Poly::calcCost(double v_length, double speed, double maxutil)
{
	cost = pow((t_lvl/dist*v_length/speed*4.5),3)*maxutil;
}

// Calculates the slope and y-intercept of the "V" vertex
//	***Use Right for max angle and Left for min angle***
void Poly::setMB_Right_pnt(double center_pnt_cost, double center_pnt_angle)
{
	if (center_pnt_angle != ang)
	{
		m = (center_pnt_cost - cost)/(center_pnt_angle - ang);
		b = (center_pnt_cost) - (m*center_pnt_angle);
	}
	else
	{
		// If the slope is infinite, make m and b 999
		m = 999;
		b = 999;
	}
}

void Poly::setMB_Left_pnt(double center_pnt_cost, double center_pnt_angle)
{
	if (center_pnt_angle != ang)
	{
		m = (cost - center_pnt_cost)/(ang- center_pnt_angle);
		b = (cost) - (m*ang);
	}
	else
	{
		// If the slope is infinite, make m and b 999
		m = 999;
		b = 999;
	}
}

// Converts the angle to the right domain and then returns the corrected value
//	case 1: // Domain [0, 360]
//	case 2: // Domain [-90, 270]
//	case 3: // Domain [-180, 180]
//	case 4: // Domain [-270, 90]
double Poly::convert_ref_frame(double Angle)
{
	double cur_ang = 0;
	// Update the current angle (Domain = [-360,360])
	cur_ang = fmod(Angle,360);

	// Make sure it is not negative (Domain = [0,360]) aka reference frame 1
	if (cur_ang<0)
		cur_ang+=360;
	switch(ref_frame)
	{
	case 1: // Domain [0, 360]
		// it is already in case 1
		break;

	case 2: // Domain [-180, 90]
		if (cur_ang > 180)
			cur_ang += -360;
		break;

	case 3: // Domain [-270, 90]
		if (cur_ang > 90)
			cur_ang += -360;
		break;

	case 4: // Domain [-90, 270]
		if (cur_ang > 270)
			cur_ang += -360;
		break;

	default:
		//postWMessage("Invalid Reference Frame");
		break;
	}
	return cur_ang;
}




